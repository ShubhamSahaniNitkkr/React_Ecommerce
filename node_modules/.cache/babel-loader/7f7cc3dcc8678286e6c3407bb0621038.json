{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/React_Ecommerce/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/apple/Documents/React_Ecommerce/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/apple/Documents/React_Ecommerce/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/apple/Documents/React_Ecommerce/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/apple/Documents/React_Ecommerce/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/apple/Documents/React_Ecommerce/src/components/cart/paypalButton.js\";\nimport React from 'react';\nimport PaypalExpressBtn from 'react-paypal-express-checkout';\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyApp, _React$Component);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyApp).apply(this, arguments));\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var onSuccess = function onSuccess(payment) {\n        // Congratulation, it came here means everything's fine!\n        console.log(\"The payment was succeeded!\", payment);\n\n        _this.props.clearCart();\n\n        _this.props.history.push('/'); // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\n\n      };\n\n      var onCancel = function onCancel(data) {\n        // User pressed \"cancel\" or close Paypal's popup!\n        console.log('The payment was cancelled!', data); // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\n      };\n\n      var onError = function onError(err) {\n        // The main Paypal's script cannot be loaded or somethings block the loading of that script!\n        console.log(\"Error!\", err); // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\n        // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\n      };\n\n      var env = 'sandbox'; // you can set here to 'production' for production\n\n      var currency = 'USD'; // or you can set this value from your props or state\n      // let total = 1; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\n      // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\n\n      var client = {\n        sandbox: 'YOUR-SANDBOX-APP-ID',\n        production: 'YOUR-PRODUCTION-APP-ID' // In order to get production's app-ID, you will have to send your app to Paypal for approval first\n        // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\n        //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\n        // For production app-ID:\n        //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\n        // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\n\n      };\n      return React.createElement(PaypalExpressBtn, {\n        env: env,\n        client: client,\n        currency: currency,\n        total: this.props.totalAmount,\n        onError: onError,\n        onSuccess: onSuccess,\n        onCancel: onCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MyApp;\n}(React.Component);\n\nexport { MyApp as default };","map":{"version":3,"sources":["/Users/apple/Documents/React_Ecommerce/src/components/cart/paypalButton.js"],"names":["React","PaypalExpressBtn","MyApp","onSuccess","payment","console","log","props","clearCart","history","push","onCancel","data","onError","err","env","currency","client","sandbox","production","totalAmount","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;;IAEqBC,K;;;;;;;;;;;;;6BACR;AAAA;;AACL,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAC3B;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,OAA1C;;AACE,QAAA,KAAI,CAACG,KAAL,CAAWC,SAAX;;AACA,QAAA,KAAI,CAACD,KAAL,CAAWE,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB,EAJuB,CAMvB;;AACP,OAPD;;AASA,UAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACvB;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CM,IAA1C,EAFuB,CAGvB;AACH,OAJD;;AAMA,UAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAS;AACrB;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBQ,GAAtB,EAFqB,CAGrB;AACA;AACH,OALD;;AAOA,UAAIC,GAAG,GAAG,SAAV,CAvBK,CAuBgB;;AACrB,UAAIC,QAAQ,GAAG,KAAf,CAxBK,CAwBiB;AACtB;AACA;;AAEA,UAAMC,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAK,qBADD;AAEXC,QAAAA,UAAU,EAAE,wBAFD,CAIf;AACA;AACA;AACA;AACA;AAEA;;AAVe,OAAf;AAWA,aACI,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEJ,GAAvB;AAA4B,QAAA,MAAM,EAAEE,MAApC;AAA4C,QAAA,QAAQ,EAAED,QAAtD;AAAgE,QAAA,KAAK,EAAE,KAAKT,KAAL,CAAWa,WAAlF;AAA+F,QAAA,OAAO,EAAEP,OAAxG;AAAiH,QAAA,SAAS,EAAEV,SAA5H;AAAuI,QAAA,QAAQ,EAAEQ,QAAjJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EA3C8BX,KAAK,CAACqB,S;;SAApBnB,K","sourcesContent":["import React from 'react';\nimport PaypalExpressBtn from 'react-paypal-express-checkout';\n\nexport default class MyApp extends React.Component {\n    render() {\n        const onSuccess = (payment) => {\n            // Congratulation, it came here means everything's fine!\n            \t\tconsole.log(\"The payment was succeeded!\", payment);\n                this.props.clearCart();\n                this.props.history.push('/');\n\n                // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\n        }\n\n        const onCancel = (data) => {\n            // User pressed \"cancel\" or close Paypal's popup!\n            console.log('The payment was cancelled!', data);\n            // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\n        }\n\n        const onError = (err) => {\n            // The main Paypal's script cannot be loaded or somethings block the loading of that script!\n            console.log(\"Error!\", err);\n            // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\n            // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\n        }\n\n        let env = 'sandbox'; // you can set here to 'production' for production\n        let currency = 'USD'; // or you can set this value from your props or state\n        // let total = 1; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\n        // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\n\n        const client = {\n            sandbox:    'YOUR-SANDBOX-APP-ID',\n            production: 'YOUR-PRODUCTION-APP-ID',\n        }\n        // In order to get production's app-ID, you will have to send your app to Paypal for approval first\n        // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\n        //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\n        // For production app-ID:\n        //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\n\n        // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\n        return (\n            <PaypalExpressBtn env={env} client={client} currency={currency} total={this.props.totalAmount} onError={onError} onSuccess={onSuccess} onCancel={onCancel} />\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}